/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.Profile;
import org.openapitools.model.ProfileAttributeAdd;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-05-02T15:30:18.322-04:00[America/New_York]")

@Validated
@Api(value = "profile", description = "the profile API")
public interface ProfileApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Retrieve profile attributes", nickname = "findProfileByKerberosId", notes = "Returns a profile based on a single KerberosId. Q:  If there is no profile matching the KerberosId, will one be inserted?  ", response = Profile.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class),
        @ApiResponse(code = 200, message = "profile response", response = Profile.class) })
    @RequestMapping(value = "/profile/{kerberos_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Profile> findProfileByKerberosId(@ApiParam(value = "Unique Kerberos Identifier",required=true) @PathVariable("kerberos_id") String kerberosId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id\" : \"d7e1bc6b-b659-432d-b346-29f3a530bfa9\",  \"kerberos_id\" : \"jdoe\",  \"last_logged_in\" : \"2020-04-23T18:25:43.511Z\",  \"profile_attributes\" : [ {    \"key\" : \"email\",    \"value\" : \"jdoe@abc.com\"  }, {    \"key\" : \"name\",    \"value\" : \"jane doe\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Delete ONE named attribute", nickname = "profileAttributeKerberosIdAttributeDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "assume deleted") })
    @RequestMapping(value = "/profile/attribute/{kerberos_id}/{attribute}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> profileAttributeKerberosIdAttributeDelete(@ApiParam(value = "Kerberos Id",required=true) @PathVariable("kerberos_id") String kerberosId,@ApiParam(value = "Name of the attribute to update",required=true) @PathVariable("attribute") String attribute) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Add ONE attribute key-value", nickname = "profileAttributeKerberosIdAttributePost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok") })
    @RequestMapping(value = "/profile/attribute/{kerberos_id}/{attribute}",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> profileAttributeKerberosIdAttributePost(@ApiParam(value = "Kerberos Id",required=true) @PathVariable("kerberos_id") String kerberosId,@ApiParam(value = "Key to be updated",required=true) @PathVariable("attribute") String attribute,@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProfileAttributeAdd profileAttributeAdd) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
